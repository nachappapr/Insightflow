// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?       @map("email_verified")
    image         String?
    username      String?         @unique
    accounts      Account[]
    sessions      Session[]
    // Optional for WebAuthn support
    Authenticator Authenticator[]

    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    Feedback  Feedback[]
    Like      Like[]
    Comment   Comment[]
}

model Account {
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Feedback {
    id          String   @id @default(cuid())
    title       String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // status
    statusId String         @map("status_id")
    status   FeedbackStatus @relation(fields: [statusId], references: [id])

    // category
    categoryId String           @map("category_id")
    category   FeedbackCategory @relation(fields: [categoryId], references: [id])

    // user
    userId   String    @map("user_id")
    user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    likes    Like[]
    comments Comment[]
}

model FeedbackStatus {
    id        String     @id @default(cuid())
    name      String     @unique
    color     String?
    order     Int?
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime   @updatedAt @map("updated_at")
    feedbacks Feedback[]
}

model FeedbackCategory {
    id        String     @id @default(cuid())
    name      String     @unique
    color     String?
    order     Int?
    createdAt DateTime   @default(now()) @map("created_at")
    updatedAt DateTime   @updatedAt @map("updated_at")
    feedbacks Feedback[]
}

model Like {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    feedbackId String
    feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

    @@unique([userId, feedbackId])
    @@index([feedbackId])
    @@index([userId])
}

model Comment {
    id        String   @id @default(cuid())
    content   String   @db.Text
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    userId     String   @map("user_id")
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    feedbackId String   @map("feedback_id")
    feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

    parentId String?   @map("parent_id")
    parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
    replies  Comment[] @relation("CommentReplies")

    @@index([userId])
    @@index([feedbackId])
    @@index([parentId])
}
